<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "event".
 *
 * @property integer $id
 * @property string $code
 * @property integer $from_user_id
 * @property integer $to
 * @property string $subject
 * @property string $body
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property EventCode $code0
 * @property User $fromUser
 * @property EventHasType[] $eventHasTypes
 * @property EventType[] $types
 * @property UserEvent[] $userEvents
 */
class Event extends \yii\db\ActiveRecord
{
    public $types = [];
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'event';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['code', 'from_user_id', 'subject', 'body', 'types'], 'required'],
            [['from_user_id', 'to', 'created_at', 'updated_at'], 'integer'],
            [['body'], 'string'],
            [['code'], 'string', 'max' => 32],
            [['subject'], 'string', 'max' => 255],
            [['code'], 'exist', 'skipOnError' => true, 'targetClass' => EventCode::className(), 'targetAttribute' => ['code' => 'name']],
            [['from_user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['from_user_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'code' => 'Code',
            'from_user_id' => 'From User ID',
            'to' => 'To',
            'subject' => 'Subject',
            'body' => 'Body',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCode0()
    {
        return $this->hasOne(EventCode::className(), ['name' => 'code']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFromUser()
    {
        return $this->hasOne(User::className(), ['id' => 'from_user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventHasTypes()
    {
        return $this->hasMany(EventHasType::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTypes()
    {
        return $this->hasMany(EventType::className(), ['id' => 'type_id'])->viaTable('event_has_type', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserEvents()
    {
        return $this->hasMany(UserEvent::className(), ['event_id' => 'id']);
    }

    /**
     * Сохранение связки событие -> тип
     *
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        EventHasType::deleteAll(['event_id' => $this->id]);

        foreach ($this->types as $type) {
            $has = new EventHasType();
            $has->type_id = $type;
            $has->event_id = $this->id;
            $has->save();
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
