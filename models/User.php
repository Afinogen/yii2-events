<?php

namespace app\models;

use yii\db\ActiveRecord;

/**
 * Class User
 *
 * @package app\models
 *
 * @property integer $id;
 * @property string $username
 * @property string $email
 * @property string $password
 * @property string $auth_key
 * @property string $access_token
 * @property integer $role_id
 */
class User extends ActiveRecord implements \yii\web\IdentityInterface
{
    const ROLE_USER = 1;
    const ROLE_ADMIN = 2;

    const EVENT_NEW_USER = 'new_user';

    /**
     * Присоединение обработчиков событий
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->on(self::EVENT_NEW_USER, ['app\components\HandlerEvents', 'newEvent']);
    }

    /**
     * Генерация переменныых для шаблонов событий
     * @return array
     */
    public function getTemplateVariables()
    {
        $variables = [];
        $className = strtolower((new \ReflectionClass($this))->getShortName());

        foreach ($this as $key => $val) {
            $variables['{'.$className.'_'.$key.'}'] = $val;
        }

        return $variables;
    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['access_token' => $token]);
    }

    /**
     * Finds user by username
     *
     * @param  string      $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username]);
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->auth_key === $authKey;
    }

    /**
     * Validates password
     *
     * @param  string  $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return \Yii::$app->getSecurity()->validatePassword($password, $this->password);
    }

    /**
     * После добавления пользователя происходит вызов события
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if ($insert) {
            $this->trigger(self::EVENT_NEW_USER);
        }
    }
}
