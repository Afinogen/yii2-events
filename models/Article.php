<?php

namespace app\models;

use Yii;
use app\components\HandlerEvents;
use yii\behaviors\TimestampBehavior;
use yii\helpers\Html;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $title
 * @property string $anons
 * @property string $body
 * @property integer $created_at
 * @property integer $updated_at
 */
class Article extends \yii\db\ActiveRecord
{
    const EVENT_NEW_ARTICLE = 'new_article';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->on(self::EVENT_NEW_ARTICLE, ['app\components\HandlerEvents', 'newEvent']);
    }

    /**
     * Генерация переменныых для шаблонов событий
     * @return array
     */
    public function getTemplateVarables()
    {
        $varables = [];
        $className = strtolower((new \ReflectionClass($this))->getShortName());

        foreach ($this as $key => $val) {
            $varables['{'.$className.'_'.$key.'}'] = $val;
        }
        
        $varables['{'.$className.'_link}'] = Html::a('Читать далее', ['/article/view', ['id' => $this->id]]);

        return $varables;
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['body'], 'string'],
            [['created_at', 'updated_at'], 'integer'],
            [['anons', 'title'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'anons' => 'Anons',
            'body' => 'Body',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        
        //Только на добавление
        if ($insert) {
            $this->trigger(self::EVENT_NEW_ARTICLE);
        }
    }
}
